@page "/producto"
@page "/producto/{Id:int}"

@inject IProductoService productoServicio
@inject IToastService toastService
@inject SweetAlertService Swal
@inject ICategoriaServicio categoriaServicio
@inject NavigationManager _mavServicio


<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control" @bind-value="modelo.Nombre">
            </div>
            <ValidationMessage For="@(()=>modelo.Nombre)" />

            <div class="input-group  mt-3">
                <span class="input-group-text bg-light">Descripcion</span>
                <textarea class="form-control" @bind="modelo.Descripcion"></textarea>

            </div>
            <ValidationMessage For="@(()=>modelo.Descripcion)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light" for="inputGroupSelect01">Categoria</label>
                <select class="form-select" value="@modelo.IdCategoria" @onchange="CambiarCategoria">
                    @foreach (var item in listaCategoria)
                    {
                        <option value="@item.IdCategoria">@item.Nombre</option>
                    }
                </select>
            </div>

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio</span>
                <input type="number" class="form-control" @bind-value="modelo.Precio">
            </div>
            <ValidationMessage For="@(()=>modelo.Precio)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio Oferta</span>
                <input type="number" class="form-control" @bind-value="modelo.PrecioOferta">
            </div>
            <ValidationMessage For="@(()=>modelo.PrecioOferta)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
                <input type="number" class="form-control" @bind-value="modelo.Cantidad">
            </div>
            <ValidationMessage For="@(()=>modelo.Cantidad)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light">Imagen</label>
                <InputFile type="file" class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnFileChange"></InputFile>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/productos" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>




    </div>

</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Titulo = "Nueva Producto";
    private string boton = "Crear";
    private List<CategoriaDTO> listaCategoria = new List<CategoriaDTO>();
    private ProductoDTO modelo = new ProductoDTO();

    protected override async Task OnInitializedAsync()
    {
        var response = await categoriaServicio.Lista("");//Ejecutamos nuestro metodo
        if (response.EsCorrecto)
        {
            listaCategoria = (List<CategoriaDTO>)response.Resultado!; //denegamos nulos
            if(listaCategoria.Any() && Id == 0)
            {
                modelo.IdCategoria = listaCategoria.First().IdCategoria;
            }

        }
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Titulo = "Editar Producto";
            boton = "Actualizar";

            var response = await productoServicio.Obtener(Id);
            //Negamos las posibilidades de recibir nulos
            if (response.EsCorrecto!)
            {
                //Castiamos el resultado
                modelo = (ProductoDTO)response.Resultado!;//negammos que existan nulos
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
            }
        }
    }

    void CambiarCategoria(ChangeEventArgs e)
    {
        modelo.IdCategoria = Convert.ToInt32(e.Value.ToString());
    }
    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);//Obtenemos la informacion del archivo
        if(fileInfo.Extension.ToLower().Contains(".jpg")|| fileInfo.Extension.ToLower().Contains(".png"))
        {
            var format = $"imagen/{fileInfo.Extension.Replace(".", "")}";
            var resizeImagen = await e.File.RequestImageFileAsync(format, 450, 300);
            var buffer = new byte[resizeImagen.Size];
            await resizeImagen.OpenReadStream().ReadAsync(buffer);//Dentro de este array vamos a poner nuestra imagen
            var ImageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            modelo.Imagen = ImageData;
        }
    }
    private async Task GuardarCambios()
    {

        bool respuesta = true;
        string mensaje = string.Empty;

        if (Id != 0)
        {
            var response = await productoServicio.Editar(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Producto fue modificado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se puedo editar";
            }
        }
        else
        {
            //Cuando el id es igual a 0

            var response = await productoServicio.Crear(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Producto fue creada";
            }
            else
            {
                respuesta = false;
                mensaje = "No se puedo crear";
            }
        }
        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _mavServicio.NavigateTo("/productos");
        }
        else
        {
            toastService.ShowWarning(mensaje);
        }
    }
}
