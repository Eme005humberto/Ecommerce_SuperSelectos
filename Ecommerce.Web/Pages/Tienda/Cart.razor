@page "/cart"
@inject ICarritoServicio carritoServicio
@inject IVentaServicio ventaServicio
@inject IToastService toastServicio
@inject NavigationManager _navServicio
@using Ecommerce.DTO;

<div class="row mt-4">

@*    INFORMACION DE LOS PRODUCTOS AGREGADOS EN EL CARRITO*@

    <div class="col-sm-8">
        <div class="card mb-3">

            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm bg-light table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th style="width:102px"></th>
                                <th>Producto</th>
                                <th>Precio</th>
                                <th>Cantidad</th>
                                <th>Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>

                            @if (lista.Any())
                            {
                                foreach (var item in lista)
                                {
                                    <tr>
                                        <td valign="middle">
                                            <img class="card-img-top" src="@item.Producto.Imagen" style="width:100px">
                                        </td>
                                        <td valign="middle">@item.Producto.Nombre</td>
                                        <td valign="middle">@item.Precio</td>
                                        <td valign="middle" align="center">
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-outline-dark" @onclick="(() =>Disminuir(item.Producto.IdProducto))">
                                                    <i class="oi oi-minus"></i>
                                                    </button>
                                                <input class="form-control" readonly="readonly" style="width:50px" @bind-value="item.Cantidad" />
                                                <button type="button" class="btn btn-outline-dark" @onclick="(() =>Aumentar(item.Producto.IdProducto))">
                                                    <i class="oi oi-plus"></i>
                                                    </button>
                                            </div>
                                        </td>
                                        <td valign="middle">@item.Total</td>
                                        <td valign="middle">
                                            <button type="button" class="btn btn-outline-dark" @onclick="(async () => await Eliminar(item.Producto.IdProducto))">
                                                <i class="oi oi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }

                                
                            }else{
                                <tr>
                                    <td colspan="6">
                                        <div class="alert alert-warning" role="alert">
                                           No hay productos en el carrito
                                        </div>
                                    </td>
                                </tr>
                            }
                           

                        </tbody>
                    </table>
                </div>

                
            </div>

         
        </div>
    </div>

@*    SE MUESTRA LA INFORMACION DE TARJETA Y OPCION DE PAGAR*@
    <div class="col-sm-4">
        <div class="card mb-3">
            <div class="card-body">
                <EditForm Model="targeta" OnValidSubmit="ProcesarPago">
                    <DataAnnotationsValidator></DataAnnotationsValidator>

                    <div class="mb-2">
                        <label class="form-label">Nombre Titular</label>
                        <input type="text" class="form-control form-control-sm" placeholder="" @bind-value="targeta.Titular" disabled="@disabled">
                        <ValidationMessage For="@(()=>targeta.Titular)" />
                        
                    </div>
                    <div class="mb-2">
                        <label  class="form-label">Numero Tarjeta</label>
                        <input type="text" class="form-control form-control-sm" placeholder="##############" autocomplete="off" @bind-value="targeta.Numero" disabled="@disabled">
                        <ValidationMessage For="@(()=>targeta.Numero)" />
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="mb-2">
                                <label class="form-label">Vigencia</label>
                                <input type="text" class="form-control form-control-sm" placeholder="MM/YY" autocomplete="off" @bind-value="targeta.Vigencia" disabled="@disabled">
                                <ValidationMessage For="@(()=>targeta.Vigencia)" />
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="mb-2">
                                <label class="form-label">CVV</label>
                                <input type="text" class="form-control form-control-sm" placeholder="###" autocomplete="off" @bind-value="targeta.CVV" disabled="@disabled">
                                <ValidationMessage For="@(()=>targeta.CVV)" />
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="d-flex justify-content-between">
                        <div>Total a pagar:</div>
                        <div>S/. @(lista.Sum(i => i.Total))</div>
                    </div>
                    <div class="mt-2">
                        <div class="d-grid gap-1">
                            <button class="btn btn-outline-secondary float-end" type="submit" disabled="@disabled">Procesar pago</button>
                        </div>
                    </div>
                </EditForm>

               @* COMENTAR TODO ESTO*@
               @*
                <AuthorizeView>
                    <NotAuthorized>
                        <div class="alert alert-danger mt-2" role="alert">
                            Debe iniciar sesion para poder realizar la compra
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
                *@

            </div>
        </div>
    </div>
</div>

@code {
    private bool disabled = true;//Para desabilitar los botones y la targeta
                                 //se habilita cuando ha iniciado sesion

    private List<CarritoDTO> lista = new List<CarritoDTO>();
    private decimal  TotalPagar = 0;
    private TargetaDTO targeta = new TargetaDTO();

    protected override async Task OnInitializedAsync()
    {
        //Obtenemos la lista de nuestro carrito
        lista = await carritoServicio.DevolverCarrito();
    }
    //Metodo para disminuir o aumentar el producto
    private void Disminuir(int id)
    {
        CarritoDTO item = lista.First(p => p.Producto.IdProducto == id);
        if(item.Cantidad -1 > 0)
        {
            decimal? precioFinal = (item.Producto.PrecioOferta != 0 && item.Producto.PrecioOferta < item.Producto.Precio) ? item.Producto.PrecioOferta : item.Producto.Precio;

            item.Cantidad--;
            item.Total = item.Cantidad * precioFinal;
        }
    }
    private void Aumentar(int id)
    {
        CarritoDTO item = lista.First(p => p.Producto.IdProducto == id);

        decimal? precioFinal = (item.Producto.PrecioOferta != 0 && item.Producto.PrecioOferta < item.Producto.Precio) ? item.Producto.PrecioOferta : item.Producto.Precio;
        item.Cantidad++;
        item.Total = item.Cantidad * precioFinal;
    }
    //Metodo para eliminar un carrito
    private async Task Eliminar(int idProducto)
    {
        CarritoDTO producto = lista.First(p => p.Producto.IdProducto == idProducto);
        if (producto!= null)
        {
            lista.Remove(producto);
            await carritoServicio.EliminarCarrito(idProducto);
        }
    }

    //Metodo que realizara la venta
    private async Task ProcesarPago()
    {
        if(lista.Count == 0)
        {
            toastServicio.ShowWarning("No se encontraron productos");
            return; 
        }
        List<DetalleVentaDTO> detalle = new List<DetalleVentaDTO>();
        foreach(var item in lista)
        {
            detalle.Add(new DetalleVentaDTO()
            {
                //Vamos agregar datos o a poblar la lista
                IdProducto = item.Producto.IdProducto,
                Cantidad = item.Cantidad,
                Total = item.Total
            });
        }
        VentaDTO modelo = new VentaDTO()
            {
                IdUsuario = 1,//Valor por defecto
                Total = lista.Sum(i => i.Total),
                DetalleVenta = detalle

            };
        var response = await ventaServicio.Registrar(modelo);//Registramos la venta
        if (response.EsCorrecto)
        {
            await carritoServicio.limpiarCarrito();
            toastServicio.ShowSuccess("Venta registrada");
            _navServicio.NavigateTo("/catalogo");
        }
        else
        {
            toastServicio.ShowError(response.Mensaje);
        }
    }
}
